Javascript bir single-threaded programlama dilidir. Yani kodu satır satır okur ve sırayla işleme sokar.





function printString(string) {
  setTimeout(() => {
    console.log(string);
  }, Math.floor(Math.random() * 100) + 1);
}




function printAll() {
  printString("A");
  printString("B");
  printString("C");
}
printAll();





  Her ne kadar sırayla çağırılmış olsalar da printAll fonksiyonu her çağırıldığında A, B, C harfleri farklı sırayla loglanır. 
 printString fonksiyonu asynchronous çalışır. A, B, C için her fonksiyon sırayla çalıştırılır ancak setTimeOut
 fonksiyonundan dolayı farklı zamanlarda gercekleşirler. Bu da A, B, C harflerinin farklı sırayla loglanmasına sebep olur.

 Async / Await
Async/Await yapısı asynchronous işlemleri daha anlaşılması kolay bir hale getiren ECMAScript 2017 ile kullanıma sunulan promise tabanlı bir Javascript özelliğidir.


async anahtar kelimesi fonksiyon sonucunun bir Promise olduğu belirtirken await ise sonucu Promise olan fonksiyonun bitmesini bekler.

Nedir Promise?

 Şu yazıdan alınmış bir örnekle başlayayım. Diyelim ki bir hamburgerciye gittiniz ve kasada siparişinizi verdiniz. Kasiyer de size siparişinizi hazırladıklarında haber
vermek üzere bir elektronik alet teslim etti. Şu anda hamburger bizim için gelecekte elde edebileceğimiz bir değer. Elimizdeki aygıt da bu değere ulaşmamız için müessesenin 
verdiği sözün (işte promise) bir göstergesi. Aygıt bildirim alıncaya kadar bekleme (pending) durumundadır. Bildirim geldiğinde ise ya hamburgerimiz başarılı (resolved)
 bir şekilde hazırlanmıştır, ya da beklenenin dışına çıkarak başarısız (rejected) olmuştur. Başarılı durumda afiyetle yemeğimize yumuluruz tabii ki. 
Başarısız durum biraz daha nahoş olacaktır. Kasiyerle kavga ederek veya yeniden sipariş vererek hatalı durumu yönetmemiz (error handling) gerekir.

Callbacks  Kaynak:  https://medium.com/codefiction/javascriptte-promise-kullan%C4%B1m%C4%B1-ccca1123989a

 Callback, en basit haliyle herhangi bir fonksiyona parametre olarak verdiğimiz ve sonra geri çağıracağımız fonksiyonlara denir.
  İstenilen değere ulaştığında veya işlem sonlandığında görevini yerine getirir.



Promise örneği

const sozVerdik = new Promise(function(resolve, reject){
  if (herseyYolunda) {
    resolve('İşlem tamam!');
  } else {
    reject('Bir sıkıntı var...');
  }                                    
})

sozVerdik.then(function(cevap){
  console.log(cevap) // 'İşlem tamam!' yazısını basar
}).catch(function(hata){
  console.log(hata) // 'Bir sıkıntı var...' yazısını basar
})





Async/await bize neler katacak? Maddelerimiz şöyle:
Kod daha okunaklı hale gelecek
Asenkron işlemlerin gerçekleşme sırasını takip etmek kolaylaşacak
Promise zincirleri için birçok .then() yazmak gerekmeyecek
Diğer programlama dillerinden aşina olunan try-catch yapısı kullanılabilecek




// Promise zinciri
const zincirES6 = () => {
  return asenkronIslem1()
    .then(asenkronIslem2)
    .then(asenkronIslem3)
}

zincirES6()
  .then(cevap => console.log(cevap))
  .catch(hata => console.log(hata))


// Async/await 
const zincirES7 = async () => {
  const sonuc1 = await asenkronIslem1();
  const sonuc2 = await asenkronIslem2(sonuc1);
  return asenkronIslem3(sonuc2);
}

try {
  const cevap = await zincirES7();
  console.log(cevap);
}catch(hata){
  console.log(hata);
}


 await, promise dönen fonksiyonların öncesinde kullanılarak değerin gelmesini bekletir.
  Ancak await sadece async ile tanımlanmış bir fonksiyon içerisinde kullanılabilir. async ile tanımlanmış asenkron bir fonksiyonun dönüş değeri de promise nesnesi olur.

  Kaynak: https://www.youtube.com/watch?v=ayvrylRT14M